# -*- coding: utf-8 -*-
"""Aplicações da Ciência de Dados em Tecnologias Disruptivas - Módulo 14

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1kJroIaKRLEO1WOAuJagQjtMODLh0mdFJ

Fluxo Óptico Denso
"""

from google.colab import files
from google.colab.patches import cv2_imshow
import cv2
import numpy as np

# Função para fazer o upload do vídeo
uploaded = files.upload()

# Obtém o nome do arquivo enviado
video_file = list(uploaded.keys())[0]

# Captura de vídeo a partir do arquivo enviado
cap = cv2.VideoCapture(video_file)

# Verifica se o vídeo foi carregado corretamente
if not cap.isOpened():
    print("Erro ao abrir o vídeo.")
    exit()

# Parâmetros para o cálculo do fluxo óptico
params = dict(winSize=(15, 15), maxLevel=2,
              criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

# Inicializa o primeiro quadro
ret, old_frame = cap.read()
if not ret:
    print("Erro ao ler o primeiro quadro.")
    cap.release()
    exit()

old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Criação de um canvas para desenhar o fluxo
h, w = old_gray.shape
flow_canvas = np.zeros_like(old_frame)

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Conversão do quadro atual para escala de cinza
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Cálculo do fluxo óptico denso
    flow = cv2.calcOpticalFlowFarneback(old_gray, frame_gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

    # Escalando o fluxo óptico
    flow_magnitude, flow_angle = cv2.cartToPolar(flow[..., 0], flow[..., 1])
    flow_magnitude = cv2.normalize(flow_magnitude, None, 0, 255, cv2.NORM_MINMAX)

    # Visualização do fluxo
    for y in range(0, h, 5):
        for x in range(0, w, 5):
            magnitude = flow_magnitude[y, x]
            angle = flow_angle[y, x]

            # Escolhendo a cor com base na magnitude
            if magnitude < 50:
                color = (0, 255, 0)  # Verde para movimentos pequenos
            elif magnitude < 100:
                color = (0, 128, 255)  # Amarelo para movimentos médios
            else:
                color = (0, 0, 255)  # Vermelho para movimentos grandes

            # Desenhando a linha
            fx, fy = flow[y, x]
            cv2.line(flow_canvas, (x, y), (int(x + fx), int(y + fy)), color, 1)

            # Desenhando o ponto
            cv2.circle(flow_canvas, (x, y), 1, (0, 0, 255), -1)

    # Exibição dos resultados
    cv2_imshow(flow_canvas)  # Use cv2_imshow() em vez de cv2.imshow()

    # Atualiza o quadro anterior
    old_gray = frame_gray.copy()
    flow_canvas.fill(0)

    # Para parar a execução após um determinado número de quadros
    if cv2.waitKey(30) & 0xFF == 27:  # Pressione ESC para sair
        break

cap.release()

"""Teoria do Optical Flow Dense"""

from google.colab import files
from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Função para fazer o upload do vídeo
uploaded = files.upload()

# Obtém o nome do arquivo enviado
video_file = list(uploaded.keys())[0]

# Captura de vídeo a partir do arquivo enviado
cap = cv2.VideoCapture(video_file)

# Verifica se o vídeo foi carregado corretamente
if not cap.isOpened():
    print("Erro ao abrir o vídeo.")
    exit()

# Inicializa o primeiro quadro
ret, old_frame = cap.read()
if not ret:
    print("Erro ao ler o primeiro quadro.")
    cap.release()
    exit()

# Conversão do quadro inicial para escala de cinza
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Criação de um canvas para desenhar o fluxo
h, w = old_gray.shape
flow_canvas = np.zeros_like(old_frame)

# Lista para armazenar magnitudes médias
average_magnitudes = []

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Conversão do quadro atual para escala de cinza
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Cálculo do fluxo óptico denso
    flow = cv2.calcOpticalFlowFarneback(old_gray, frame_gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

    # Escalando o fluxo óptico
    flow_magnitude, flow_angle = cv2.cartToPolar(flow[..., 0], flow[..., 1])

    # Armazenando a média da magnitude
    average_magnitudes.append(np.mean(flow_magnitude))

    # Visualização do fluxo óptico
    for y in range(0, h, 10):  # Passo para desenhar linhas
        for x in range(0, w, 10):  # Passo para desenhar linhas
            fx, fy = flow[y, x]
            if np.hypot(fx, fy) > 1:  # Apenas considere fluxos significativos
                # Desenho da linha do fluxo
                cv2.line(flow_canvas, (x, y), (int(x + fx), int(y + fy)), (0, 255, 0), 1)  # Verde
                cv2.circle(flow_canvas, (x, y), 1, (0, 0, 255), -1)  # Ponto vermelho

    # Exibição dos resultados
    combined_frame = cv2.addWeighted(frame, 0.5, flow_canvas, 0.5, 0)  # Mescla o frame original com o fluxo
    cv2_imshow(combined_frame)

    # Atualiza o quadro anterior
    old_gray = frame_gray.copy()
    flow_canvas.fill(0)  # Limpa o canvas para o próximo quadro

    # Para parar a execução após um determinado número de quadros
    if cv2.waitKey(30) & 0xFF == 27:  # Pressione ESC para sair
        break

cap.release()

# Gráfico da média das magnitudes ao longo dos quadros
plt.figure(figsize=(10, 5))
plt.plot(average_magnitudes, color='blue')
plt.title('Magnitude Média do Fluxo Óptico ao Longo do Vídeo')
plt.xlabel('Quadros')
plt.ylabel('Magnitude Média')
plt.grid()
plt.show()

"""Optical Flow Dense no Google Colab"""

from google.colab import files
from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Função para fazer o upload do vídeo
uploaded = files.upload()

# Obtém o nome do arquivo enviado
video_file = list(uploaded.keys())[0]

# Captura de vídeo a partir do arquivo enviado
cap = cv2.VideoCapture(video_file)

# Verifica se o vídeo foi carregado corretamente
if not cap.isOpened():
    print("Erro ao abrir o vídeo.")
    exit()

# Inicializa o primeiro quadro
ret, old_frame = cap.read()
if not ret:
    print("Erro ao ler o primeiro quadro.")
    cap.release()
    exit()

# Conversão do quadro inicial para escala de cinza
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Criação de um canvas para desenhar o fluxo
h, w = old_gray.shape
flow_canvas = np.zeros_like(old_frame)

# Lista para armazenar magnitudes médias e variações
average_magnitudes = []
magnitude_variations = []

# Número de quadros analisados
num_frames = 0

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    # Conversão do quadro atual para escala de cinza
    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Cálculo do fluxo óptico denso
    flow = cv2.calcOpticalFlowFarneback(old_gray, frame_gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

    # Escalando o fluxo óptico
    flow_magnitude, flow_angle = cv2.cartToPolar(flow[..., 0], flow[..., 1])

    # Armazenando a média da magnitude
    avg_magnitude = np.mean(flow_magnitude)
    average_magnitudes.append(avg_magnitude)

    # Cálculo da variação da magnitude
    if num_frames > 0:
        variation = np.abs(avg_magnitude - average_magnitudes[-2])
        magnitude_variations.append(variation)

    # Visualização do fluxo óptico
    for y in range(0, h, 10):
        for x in range(0, w, 10):
            fx, fy = flow[y, x]
            if np.hypot(fx, fy) > 1:  # Apenas considere fluxos significativos
                cv2.line(flow_canvas, (x, y), (int(x + fx), int(y + fy)), (0, 255, 0), 1)  # Verde
                cv2.circle(flow_canvas, (x, y), 1, (0, 0, 255), -1)  # Ponto vermelho

    # Exibição dos resultados
    combined_frame = cv2.addWeighted(frame, 0.5, flow_canvas, 0.5, 0)
    cv2_imshow(combined_frame)

    # Atualiza o quadro anterior
    old_gray = frame_gray.copy()
    flow_canvas.fill(0)  # Limpa o canvas para o próximo quadro
    num_frames += 1

    # Para parar a execução após um determinado número de quadros
    if cv2.waitKey(30) & 0xFF == 27:  # Pressione ESC para sair
        break

cap.release()

# Gráfico da média das magnitudes ao longo dos quadros
plt.figure(figsize=(10, 5))
plt.plot(average_magnitudes, label='Magnitude Média', color='blue')
plt.plot(magnitude_variations, label='Variação da Magnitude', color='orange', linestyle='--')
plt.title('Análise do Fluxo Óptico ao Longo do Vídeo')
plt.xlabel('Quadros')
plt.ylabel('Magnitude Média e Variação')
plt.legend()
plt.grid()
plt.show()

"""Avaliar o Desempenho do Optical Flow Dense"""

from google.colab import files
from google.colab.patches import cv2_imshow
import cv2
import numpy as np
import matplotlib.pyplot as plt

# Carregamento do vídeo
uploaded = files.upload()
video_file = list(uploaded.keys())[0]
cap = cv2.VideoCapture(video_file)

# Inicialização do primeiro quadro
ret, old_frame = cap.read()
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Criação do canvas para o fluxo óptico
h, w = old_gray.shape
flow_canvas = np.zeros_like(old_frame)

# Listas para armazenar magnitudes médias e variações
average_magnitudes = []
magnitude_variations = []

# Número de quadros analisados
num_frames = 0

# Parâmetros avançados do Farneback Optical Flow
params = dict(winSize=(15, 15), maxLevel=2,
              criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

# Loop de processamento de quadros
while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Cálculo do fluxo óptico denso
    flow = cv2.calcOpticalFlowFarneback(old_gray, frame_gray, None, 0.5, 3, 15, 3, 5, 1.2, 0)

    # Escalonamento do fluxo óptico
    flow_magnitude, flow_angle = cv2.cartToPolar(flow[..., 0], flow[..., 1])

    # Armazenamento da média da magnitude
    avg_magnitude = np.mean(flow_magnitude)
    average_magnitudes.append(avg_magnitude)

    # Cálculo da variação da magnitude
    if num_frames > 0:
        variation = np.abs(avg_magnitude - average_magnitudes[-2])
        magnitude_variations.append(variation)

    # Visualização do fluxo óptico
    for y in range(0, h, 10):
        for x in range(0, w, 10):
            fx, fy = flow[y, x]
            if np.hypot(fx, fy) > 1:  # Apenas considere fluxos significativos
                cv2.line(flow_canvas, (x, y), (int(x + fx), int(y + fy)), (0, 255, 0), 1)  # Verde
                cv2.circle(flow_canvas, (x, y), 1, (0, 0, 255), -1)  # Ponto vermelho

    # Exibição dos resultados
    combined_frame = cv2.addWeighted(frame, 0.5, flow_canvas, 0.5, 0)
    cv2_imshow(combined_frame)

    # Atualização do quadro anterior
    old_gray = frame_gray.copy()
    flow_canvas.fill(0)
    num_frames += 1

    # Para parar a execução após um determinado número de quadros
    if cv2.waitKey(30) & 0xFF == 27:  # Pressione ESC para sair
        break

cap.release()

# Gráfico da média das magnitudes ao longo dos quadros
plt.figure(figsize=(10, 5))
plt.plot(average_magnitudes, label='Magnitude Média', color='blue')
plt.plot(magnitude_variations, label='Variação da Magnitude', color='orange', linestyle='--')
plt.title('Análise do Fluxo Óptico ao Longo do Vídeo')
plt.xlabel('Quadros')
plt.ylabel('Magnitude Média e Variação')
plt.legend()
plt.grid()
plt.show()