# -*- coding: utf-8 -*-
"""Aplicações da Ciência de Dados em Tecnologias Disruptivas - Módulo 13(b)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DPOc-DTmXvqKd1WGqvjj72gb8ann10bR
"""

# Importando bibliotecas necessárias
import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# Carregar um vídeo de exemplo
video_path = 'https://github.com/opencv/opencv/blob/master/samples/data/vtest.avi?raw=true'
cap = cv2.VideoCapture(video_path)

# Definindo parâmetros para detectar pontos de interesse
# Ajustando os parâmetros para otimizar a detecção de características
feature_params = dict(maxCorners=200, qualityLevel=0.3, minDistance=10, blockSize=7)

# Lendo o primeiro quadro
ret, old_frame = cap.read()
old_gray = cv2.cvtColor(old_frame, cv2.COLOR_BGR2GRAY)

# Detectando pontos de interesse
p0 = cv2.goodFeaturesToTrack(old_gray, mask=None, **feature_params)

# Exibindo o primeiro quadro com pontos de interesse
for i in p0:
    a, b = i.ravel().astype(int)
    cv2.circle(old_frame, (a, b), 5, (0, 0, 255), -1)  # Desenhando os pontos detectados

cv2_imshow(old_frame)  # Mostrando o primeiro quadro com pontos de interesse

# Feedback sobre as modificações
print("O número máximo de características detectadas foi aumentado para 200 para melhorar a cobertura do movimento.")
print("A distância mínima entre características foi ajustada para 10 para evitar a detecção de pontos muito próximos.")

# Configurando parâmetros para o cálculo do fluxo óptico
lk_params = dict(winSize=(15, 15), maxLevel=2,
                 criteria=(cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, 10, 0.03))

# Criando uma máscara para desenhar as trajetórias
mask = np.zeros_like(old_frame)

# Inicializando contadores para melhorar o fluxo óptico
trajectory_length = 10  # Número de quadros para a trajetória
trajectories = []  # Armazena as trajetórias

while cap.isOpened():
    ret, frame = cap.read()
    if not ret:
        break

    frame_gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Calculando o fluxo óptico
    p1, st, err = cv2.calcOpticalFlowPyrLK(old_gray, frame_gray, p0, None, **lk_params)

    # Selecionando pontos bons
    good_new = p1[st == 1]
    good_old = p0[st == 1]

    # Armazenando trajetórias para otimização visual
    for i, (new, old) in enumerate(zip(good_new, good_old)):
        a, b = new.ravel().astype(int)  # Convertendo para inteiro
        c, d = old.ravel().astype(int)   # Convertendo para inteiro
        mask = cv2.line(mask, (a, b), (c, d), (0, 255, 0), 2)
        frame = cv2.circle(frame, (a, b), 5, (0, 0, 255), -1)

        # Armazenando a trajetória
        trajectories.append((c, d, a, b))

    img = cv2.add(frame, mask)

    # Exibindo o quadro atual com a trajetória
    cv2_imshow(img)

    # Feedback sobre o fluxo óptico
    print("O fluxo óptico foi calculado usando o algoritmo Lucas-Kanade.")
    print(f"Uma nova trajetória foi desenhada para cada ponto rastreado.")
    print("As melhorias visuais na trajetória ajudam a entender melhor o movimento e a dinâmica dos pontos detectados.")

    # Atualizando quadros e pontos
    old_gray = frame_gray.copy()
    p0 = good_new.reshape(-1, 1, 2)

cap.release()
cv2.destroyAllWindows()